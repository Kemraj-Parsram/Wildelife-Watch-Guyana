async function identifySpecies(base64ImageData) {
            const apiKey = ""; // API Key will be injected by the environment
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = {
                contents: [{
                    parts: [
                        { text: "Identify the animal in this image and provide only its scientific name. If it's not an animal, say 'Not an animal'." },
                        { inlineData: { mimeType: "image/jpeg", data: base64ImageData } }
                    ]
                }]
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
                const result = await response.json();
                return result.candidates[0]?.content?.parts[0]?.text.trim() || 'Identification failed';
            } catch (error) {
                console.error("Gemini API error:", error);
                return 'Identification requires internet';
            }
        }

        function processReport() {
            const report = { ...sightingData };
            report.userName = elements.userName.value;
            report.userContact = elements.userContact.value;
            report.userNotes = elements.userNotes.value;
            
            if (!report.latitude || !report.longitude) {
                report.latitude = elements.manualLat.value || '6.8045'; // Default to Georgetown
                report.longitude = elements.manualLon.value || '-58.1551';
            }
            
            if (navigator.onLine) {
                generateEmail(report);
            } else {
                saveReportOffline(report);
                // Attempt to register a background sync
                if ('serviceWorker' in navigator && 'SyncManager' in window) {
                    navigator.serviceWorker.ready.then(swRegistration => {
                        swRegistration.sync.register('send-reports');
                    });
                }
            }
        }

        function generateEmail(report) {
            const recipient = 'wildlifewatchgy@gmail.com';
            const subject = `Wildlife Sighting Report: ${report.scientificName}`;
            const body = `
